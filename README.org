* cl-sdl2
  :PROPERTIES:
  :CUSTOM_ID: cl-sdl2
  :END:

=cl-sdl2= is a Common Lisp wrapper for the SDL 2.0 C Library, with
[[https://github.com/lispgames/cl-sdl2/graphs/contributors][many
contributors]], currently maintained by Michael Fiano
[[mailto:mail@michaelfiano.com][mail@michaelfiano.com]].

It is licensed under the [[https://opensource.org/licenses/MIT][MIT
license]].

* Installation
  :PROPERTIES:
  :CUSTOM_ID: installation
  :END:

sdl2 is in Quicklisp, see below for instructions.

** SDL 2.0 C Library Install
   :PROPERTIES:
   :CUSTOM_ID: sdl-2.0-c-library-install
   :END:

See https://wiki.libsdl.org/Installation

On Linux, you can probably find SDL2 in your distribution's package set.
For other platforms, or for building manually,
[[http://www.libsdl.org/download-2.0.php][download the source]].

*** Package
    :PROPERTIES:
    :CUSTOM_ID: package
    :END:

- Debian based: Ubuntu, Mint etc

#+BEGIN_SRC sh
    sudo apt-get install libsdl2-2.0
#+END_SRC

- Arch

#+BEGIN_SRC sh
    sudo pacman -S sdl2
#+END_SRC

*** Compilation
    :PROPERTIES:
    :CUSTOM_ID: compilation
    :END:

If you need to compile from source for your Linux platform:

1. Download [[https://www.libsdl.org/download-2.0.php][source code]]
2. Compile
3. Install

For example:

#+BEGIN_SRC sh
    cd /tmp
    wget https://www.libsdl.org/release/SDL2-2.0.4.tar.gz
    tar -xzvf SDL2-2.?.?.tar.gz
    cd SDL2-2.?.?
    ./configure
    make
    sudo make install
#+END_SRC

This will install the SDL-2.0.x C Library into your /usr/local location.

It's generally a good idea to install at a minimum the version of SDL2
that was wrapped; however, sub revisions should not introduce binary
incompatibility and should be fine. If you install a different version,
certain features may not be available or may not work correctly.

** Quicklisp Install
   :PROPERTIES:
   :CUSTOM_ID: quicklisp-install
   :END:

sdl2 is best installed via QuickLisp, though for cutting-edge changes,
you may want to install from github as below.

If you don't have Quicklisp, then follow
[[http://www.quicklisp.org/beta/][the directions]] to install it. We
assume you placed the Quicklisp repository in the default place as
indicated by the directions and have added it to your lisp init file.

** github install
   :PROPERTIES:
   :CUSTOM_ID: github-install
   :END:

#+BEGIN_SRC sh
    cd $HOME/quicklisp/local-projects
    git clone https://github.com/rpav/cl-autowrap.git
    git clone https://github.com/lispgames/cl-sdl2.git
#+END_SRC

Then, use quicklisp to install the libraries required by cl-sdl2:

Start your lisp. Then, just:

#+BEGIN_SRC lisp
    (ql:quickload "sdl2")
#+END_SRC

** Swank/Slynk features
   :PROPERTIES:
   :CUSTOM_ID: swankslynk-features
   :END:

sdl2 enables certain restarts for friendly interaction with SLIME or Sly
if you have either properly installed. "Proper installation" in this
case means =swank.asd= or =slynk.asd= is linked such that ASDF can find
and load it.

Note this is easily achieved even if you have installed them from github
or some other non-Quicklisp repository:

- Symlink the directory to =$HOME/quicklisp/local-projects/=
- Symlink the =.asd= to =$HOME/.local/common-lisp/sources/=

Similarly you could just clone into =~/quicklisp/local-projects= as
well; this should work on Windows as well. There are numerous other
options for configuring and managing ASDs, as well.

* Running the sdl2 examples
  :PROPERTIES:
  :CUSTOM_ID: running-the-sdl2-examples
  :END:

Start your lisp:

#+BEGIN_SRC lisp
    (ql:quickload :sdl2/examples)
    (sdl2-examples:basic-test)
#+END_SRC

This example will open a window with an opengl primitive in it. Any
mouse movements or keystrokes are recorded in the terminal (or emacs
SLIME output buffer =*inferior-lisp*=). Hitting the ESCAPE key will
terminate the example.

** OSX
   :PROPERTIES:
   :CUSTOM_ID: osx
   :END:

Newer versions of OSX have had some difficulties as calls which require
=nextEventMatchingMask= must be called from the main thread of your
program.

This is especially relevant to SBCL, although issues have also been
noticed in CCL.

Currently, initialisation must take place on your main thread:

#+BEGIN_SRC lisp
    (ql:quickload :sdl2/examples)

    ;; We should be able to run examples as normal on CCL
    #-sbcl (sdl2-examples:basic-test)

    ;; SBCL requires that we initialise in the main thread
    #+sbcl (sdl2:make-this-thread-main #'sdl2-examples:basic-test)
#+END_SRC

Thank you for using sdl2!
